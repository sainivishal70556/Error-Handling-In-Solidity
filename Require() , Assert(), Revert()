//SPDX-License-Identifier: MIT
//Error handling in Solidity primarily involves using the require, assert, and revert 
//statements to check conditions and revert transactions when necessary.Let us discuss 
//all about three.
pragma solidity 0.8.22;

contract error{
    address public vishal;

    bool public result;

    constructor (){
        vishal = msg.sender;
    }

    // Require should be used to validate conditions such as:
    // - inputs
    // - conditions before execution
    // - return values from calls to other functions
    function call() public view {
        require(msg.sender == vishal);
    }

    // Assert should only be used to test for internal errors,
    // and to check invariants.
    // Here we assert that num is always equal to 0
    // since it is impossible to update the value of num
    function checkunderhundred(uint num1 , uint num2)public {
        uint sum = num1 + num2;
        assert(sum <= 100);
        result = true;
    }

    
    function causeError(uint age) public  pure {
        // This function deliberately causes an error by reverting the transaction
        // Revert is useful when the condition to check is complex.
        // This code does the exact same thing as the example above
        if(age <= 17){
            revert("Error occurred");
        }
        
    }
}
